function getBestAxeNoRequire(hasAxe)
    Player = game.Players.LocalPlayer
    BestCooldown, BestAxe, BestValue = 0, nil, 0

    local Hitpoints = { ["BasicHatchet"] = 0.2, ["EndTimesAxe"] = 1.58, ["IceAxe"] = 0.36, ["CandyCornAxe"] = 1.75, ["CaveAxe"] = 0.4, ["RustyAxe"] = 0.55, ["AxeTwitter"] = 1.65, ["ManyAxe"] = 10.2, ["GingerbreadAxe"] = 1.2, ["AxeAmber"] = 3.39,  ["Beesaxe"] = 1.4, ['Axe1'] = 0.55, ['Axe2'] = 0.93, ['Axe3'] = 1.45, ["CandyCaneAxe"] = 0, ["AxeChicken"] = 0.9, ["AxeSwamp"] = 0.8, ["SilverAxe"] = 1.6,  ["FireAxe"] = 0.6, ["AxeBetaTesters"] = 1.45, ["Rukiryaxe"] = 1.68, ["AxeAlphaTesters"] = 1.5, ["BluesteelAxe"] = 2.8,}

    local Axes = {"BasicHatchet", "EndTimesAxe", "IceAxe", "CandyCornAxe", "CaveAxe", "RustyAxe", "AxeTwitter", "ManyAxe", "GingerbreadAxe", "AxeAmber", "Beesaxe", "Axe1", "Axe2", "Axe3", "CandyCaneAxe", "AxeChicken", "AxeSwamp", "SilverAxe", "FireAxe", "AxeBetaTesters", "Rukiryaxe", "AxeAlphaTesters", "BluesteelAxe", }

    local Cooldown = { ["BasicHatchet"] = 0.65, ["EndTimesAxe"] = 0.4, ["CandyCornAxe"] = 0.6, ["IceAxe"] = 0.4, ["CaveAxe"] = 0.4, ["RustyAxe"] = 0.4, ["AxeTwitter"] = 0.4, ["ManyAxe"] = 1.9, ["GingerbreadAxe"] = 0.5, ["AxeAmber"] = 1, ["Beesaxe"] = 0.5, ['Axe1'] = 0.55, ['Axe2'] = 0.93, ['Axe3'] = 1.45, ["CandyCaneAxe"] = 0.7, ["AxeChicken"] = 0.3, ["AxeSwamp"] = 0.55, ["SilverAxe"] = 0.48, ["FireAxe"] = 0.55, ["AxeBetaTesters"] = 0.54, ["Rukiryaxe"] = 0.4, ["AxeAlphaTesters"] = 0.5, ["BluesteelAxe"] = 0.8, }

    local foundAxe = false

    for i, v in pairs(Player.Backpack:GetChildren()) do
        if v:FindFirstChild("ToolName") and table.find(Axes, tostring(v.ToolName.Value)) then
            foundAxe = true
            if Hitpoints[tostring(v.ToolName.Value)] > BestValue then
                BestValue = Hitpoints[tostring(v.ToolName.Value)]
                BestAxe = v
                BestCooldown = Cooldown[tostring(v.ToolName.Value)]
            end
        end
    end

    if Player.Character:FindFirstChildOfClass("Tool") then
        local axe = Player.Character:FindFirstChildOfClass("Tool")
        if axe:FindFirstChild("ToolName") and table.find(Axes, tostring(axe.ToolName.Value)) then
            foundAxe = true
            if Hitpoints[tostring(axe.ToolName.Value)] > BestValue then
                BestValue = Hitpoints[tostring(axe.ToolName.Value)]
                BestAxe = axe
                BestCooldown = Cooldown[tostring(axe.ToolName.Value)]
            end
        end
    end
    if hasAxe then
        if Player.Character:FindFirstChild("Tool") then
            Player.Character.Humanoid:UnequipTools()
        end
        for i, v in pairs(Player.Backpack:GetChildren()) do
            if v:FindFirstChild("ToolName") and v.ToolName.Value == hasAxe then
                return true
            end
        end
    end

    return { BestAxe, BestCooldown, BestValue }
end


function getwood()
    best = getBestAxeNoRequire()
    args = {
        [1] = v.Parent.CutEvent,
        [2] = {
            ["tool"] = best[1],
            ["faceVector"] = Vector3.new(-1, 0, 0),
            ["height"] = 0.1,
            ["sectionId"] = 1,
            ["hitPoints"] = best[3],
            ["cooldown"] = best[2],
            ["cuttingClass"] = "Axe"

        }

    }


    -- Script generated by TurtleSpy, made by Intrer#0421
    for _, tree in ipairs(birchregion:GetChildren()) do
        if tree:FindFirstChild("TreeClass") then
            if tree:FindFirstChild("TreeClass").Value == "Birch" then
                if #tree:GetChildren() >= 5 then
                    for _, section in tree:GetChildren() do
                        if section.Name == "WoodSection" then
                            if section.ID.Value == 1 then
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = section.Position*Vector3.new(5,0,0)
                                break
                            end
                        end
                    end
                    while not tree:FindFirstChild("InnerWood") do
                        game:GetService("ReplicatedStorage").Interaction.RemoteProxy:FireServer(tree.CutEvent,args)
                        task.wait(best[2])
                    end
                    break
                end
            end
        end
    end
end
    
getwood()
